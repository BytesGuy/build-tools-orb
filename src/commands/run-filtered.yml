# notes:
#
# - actual regex filtering is broken somehow, even though the regexes seem right:
# https://circleci.com/gh/CircleCI-Public/build-tools-orb/470
#
# - may need additional params to specify `true` or `false` for `branches` or `tags`, as CIRCLE_BRANCH seems broken when on a tag, & vice versa (CIRCLE_TAG on a branch):
# https://circleci.com/gh/CircleCI-Public/build-tools-orb/472
# https://circleci.com/gh/CircleCI-Public/build-tools-orb/471

description: >
  Conditionally run a step, or a series of steps, via paramaterized
  branch and/or tag filters. Provide either exact branch/tag names or
  regular expressions. This command *must* be run as the last command in
  a job (given that you may pass multiple steps to it via the `steps`
  parameter, however, it is fairly adaptable): if commands or steps are
  placed after this command within a particular job in your config.yml,
  they *will not* run. Designed to mirror job-level branch/tag filters:
  https://circleci.com/docs/2.0/workflows/#using-regular-expressions-to-filter-tags-and-branches

parameters:
  only-branch:
    type: string
    default: /.*/
    description: >
      Exact name or regular expression specifying branch(es) to accept.
      Defaults to a regular expression accepting all branches, following
      the default execution pattern for job-level branch filtering:
      https://circleci.com/docs/2.0/workflows/#branch-level-job-execution

  ignore-branch:
    type: string
    default: //
    description: >
      Exact name or regular expression specifying branch(es) to ignore.
      Defaults to a regular expression ignoring no branches, following
      the default execution pattern for job-level branch filtering:
      https://circleci.com/docs/2.0/workflows/#branch-level-job-execution

  only-tag:
    type: string
    default: //
    description: >
      Exact name or regular expression specifying tag(s) to accept.
      Defaults to a regular expression accepting no tags, following
      the default execution pattern for job-level tag filtering:
      https://circleci.com/docs/2.0/workflows/#executing-workflows-for-a-git-tag

  ignore-tag:
    type: string
    default: /.*/
    description: >
      Exact name or regular expression specifying tag(s) to ignore.
      Defaults to a regular expression ignoring all tags, following
      the default execution pattern for job-level tag filtering:
      https://circleci.com/docs/2.0/workflows/#executing-workflows-for-a-git-tag

  steps:
    type: steps
    default: []
    description: >
      Steps that you'd like to run, if your provided conditions are met

steps:
  - run:
      name: evaluate branch/tag filters
      command: |
        evaluate_branch_filters () {
          BRANCH_ONLY=<<parameters.only-branch>>

          # check if we got a regex or an exact name
          if [[ "${BRANCH_ONLY:0:1}" = "/" ]]; then # regex
            STRIP_SLASHES1="${BRANCH_ONLY:1:${#BRANCH_ONLY}-2}"
            echo "branch only regex w/o slashes: $STRIP_SLASHES1"

            if [[ ! "$CIRCLE_BRANCH" =~ $STRIP_SLASHES1 ]]; then
              echo "branch doesn't match regex; halting"

              BRANCH_MATCH=false
              circleci step halt
            else
              BRANCH_MATCH=true
              echo "branch matches branch-only regex!"
            fi
          else # exact name
            if [[ "$CIRCLE_BRANCH" != "$BRANCH_ONLY" ]]; then
              echo "branch doesn't match exact name; halting"

              BRANCH_MATCH=false
              circleci step halt
            else
              BRANCH_MATCH=true
              echo "branch matches branch-only exact name!"
            fi
          fi

          # skip branch-ignore if we already know branch-only doesn't match
          if [[ $BRANCH_MATCH == true ]]; then
            BRANCH_IGNORE=<<parameters.ignore-branch>>

            # check if we got a regex or an exact name
            if [[ "${BRANCH_IGNORE:0:1}" = "/" ]]; then # regex
              STRIP_SLASHES2="${BRANCH_IGNORE:1:${#BRANCH_IGNORE}-2}"

              # skip if our branch regex is empty (//)
              if [ ! -z "$STRIP_SLASHES2" ]; then
                echo "branch ignore regex w/o slashes: $STRIP_SLASHES2"

                if [[ "$CIRCLE_BRANCH" =~ $STRIP_SLASHES2 ]]; then
                  echo "branch matches ignore regex; halting"
                  circleci step halt
                fi
              fi
            else # exact name
              if [[ "$CIRCLE_BRANCH" == "$BRANCH_IGNORE" ]]; then
                echo "branch matches exact ignore name; halting"
                circleci step halt
              fi
            fi
          fi
        }

        evaluate_tag_filters () {
          TAG_ONLY=<<parameters.only-tag>>
          # check if we got "", a regex, or an exact name
          if [[ "${TAG_ONLY:0:1}" = "/" ]]; then # regex
            STRIP_SLASHES3="${TAG_ONLY:1:${#TAG_ONLY}-2}"
            echo "tag only regex w/o slashes: $STRIP_SLASHES3"

            if [[ ! "$CIRCLE_TAG" =~ $STRIP_SLASHES3 ]]; then
              echo "tag doesn't match regex; halting"

              TAG_MATCH=false
              circleci step halt
            else
              TAG_MATCH=true
              echo "tag matches tag-only regex!"
            fi
          else # exact name
            if [[ "$CIRCLE_TAG" != "$TAG_ONLY" ]]; then
              echo "tag doesn't match exact name; halting"

              TAG_MATCH=false
              circleci step halt
            else
              TAG_MATCH=true
              echo "tag matches tag-only exact name!"
            fi
          fi

          # skip tag-ignore if we already know tag-only doesn't match
          if [[ $TAG_MATCH == true ]]; then
            TAG_IGNORE=<<parameters.ignore-tag>>

            # check if we got "", a regex, or an exact name
            if [[ "${TAG_IGNORE:0:1}" = "/" ]]; then # regex
              STRIP_SLASHES4="${TAG_IGNORE:1:${#TAG_IGNORE}-2}"
              echo "tag ignore regex w/o slashes: $STRIP_SLASHES4"

              # we will only get into this section if tag-only was set & matched
              # in which case we don't want to exit, even if default ignore is all tags
              # skip if tag-ignore value is default (/.*/)
              # also skip if there is no tag (i.e., we're on a branch)

              if [ ! -z "$CIRCLE_TAG" ]; then
                if [[ "$TAG_IGNORE" != "/.*/" ]]; then
                  if [[ "$CIRCLE_TAG" =~ $STRIP_SLASHES4 ]]; then
                    echo "tag matches ignore regex; halting"
                    circleci step halt
                  fi
                fi
              fi
            else  # exact name
              if [[ "$CIRCLE_TAG" == "$TAG_IGNORE" ]]; then
                echo "tag matches exact ignore name; halting"
                circleci step halt
              fi
            fi
          fi
        }

        # check if we are in a branch or tag job
        if [ ! -z "$CIRCLE_BRANCH" ]; then
          evaluate_branch_filters
        elif [ ! -z "$CIRCLE_TAG" ]; then
          evaluate_tag_filters
        fi

  - steps: <<parameters.steps>>
